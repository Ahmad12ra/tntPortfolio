{"ast":null,"code":"export default function shortenNumber(number) {\n  if (typeof number !== \"number\" || isNaN(number)) {\n    return \"Invalid input\"; // Handle invalid input\n  }\n  if (number < 1000) {\n    return number.toString(); // No shortening needed for numbers less than 1000\n  }\n  const abbreviations = [{\n    value: 1e9,\n    suffix: \"B\"\n  },\n  // Billion\n  {\n    value: 1e6,\n    suffix: \"M\"\n  },\n  // Million\n  {\n    value: 1e3,\n    suffix: \"K\"\n  } // Thousand\n  ];\n  for (const {\n    value,\n    suffix\n  } of abbreviations) {\n    if (number >= value) {\n      const shortened = (number / value).toFixed(1); // Round to 1 decimal place\n      return shortened.endsWith(\".0\") ? shortened.slice(0, -2) + suffix // Remove \".0\" if present\n      : shortened + suffix;\n    }\n  }\n  return number.toString(); // Fallback for numbers less than 1000\n}","map":{"version":3,"names":["shortenNumber","number","isNaN","toString","abbreviations","value","suffix","shortened","toFixed","endsWith","slice"],"sources":["C:/Users/ar913/OneDrive/Desktop/tntPortfolio/src/components/shortenNumber.js"],"sourcesContent":["export default function shortenNumber(number) {\r\n    if (typeof number !== \"number\" || isNaN(number)) {\r\n      return \"Invalid input\"; // Handle invalid input\r\n    }\r\n  \r\n    if (number < 1000) {\r\n      return number.toString(); // No shortening needed for numbers less than 1000\r\n    }\r\n  \r\n    const abbreviations = [\r\n      { value: 1e9, suffix: \"B\" }, // Billion\r\n      { value: 1e6, suffix: \"M\" }, // Million\r\n      { value: 1e3, suffix: \"K\" }, // Thousand\r\n    ];\r\n  \r\n    for (const { value, suffix } of abbreviations) {\r\n      if (number >= value) {\r\n        const shortened = (number / value).toFixed(1); // Round to 1 decimal place\r\n        return shortened.endsWith(\".0\") \r\n          ? shortened.slice(0, -2) + suffix // Remove \".0\" if present\r\n          : shortened + suffix;\r\n      }\r\n    }\r\n  \r\n    return number.toString(); // Fallback for numbers less than 1000\r\n  }"],"mappings":"AAAA,eAAe,SAASA,aAAaA,CAACC,MAAM,EAAE;EAC1C,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIC,KAAK,CAACD,MAAM,CAAC,EAAE;IAC/C,OAAO,eAAe,CAAC,CAAC;EAC1B;EAEA,IAAIA,MAAM,GAAG,IAAI,EAAE;IACjB,OAAOA,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5B;EAEA,MAAMC,aAAa,GAAG,CACpB;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EAAE;EAC7B;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EAAE;EAC7B;IAAED,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC,CAAE;EAAA,CAC9B;EAED,KAAK,MAAM;IAAED,KAAK;IAAEC;EAAO,CAAC,IAAIF,aAAa,EAAE;IAC7C,IAAIH,MAAM,IAAII,KAAK,EAAE;MACnB,MAAME,SAAS,GAAG,CAACN,MAAM,GAAGI,KAAK,EAAEG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/C,OAAOD,SAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,GAC3BF,SAAS,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGJ,MAAM,CAAC;MAAA,EAChCC,SAAS,GAAGD,MAAM;IACxB;EACF;EAEA,OAAOL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}