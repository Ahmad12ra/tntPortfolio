{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar913\\\\OneDrive\\\\Desktop\\\\tntPortfolio\\\\src\\\\components\\\\youtubeApi.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YouTubePlayer = ({\n  videoId,\n  playerId\n}) => {\n  _s();\n  const playerRef = useRef(null);\n  const [isApiReady, setIsApiReady] = useState(false);\n  useEffect(() => {\n    // Load the YouTube IFrame API if it hasn't been loaded yet\n    if (!window.YT) {\n      const tag = document.createElement(\"script\");\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n      // Set up the callback for when the API is ready\n      window.onYouTubeIframeAPIReady = () => {\n        setIsApiReady(true);\n      };\n    } else {\n      // If the API is already loaded, set the state to true\n      setIsApiReady(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (isApiReady && videoId) {\n      // Initialize the player\n      playerRef.current = new window.YT.Player(playerId, {\n        height: \"135\",\n        width: \"240\",\n        videoId: videoId,\n        playerVars: {\n          autoplay: 1,\n          // Autoplay the video\n          mute: 1,\n          // Mute the video\n          controls: 1 // Show video controls\n        },\n        events: {\n          onReady: event => {\n            event.target.mute(); // Ensure the video is muted\n          }\n        }\n      });\n    }\n\n    // Cleanup function\n    return () => {\n      if (playerRef.current && playerRef.current.destroy) {\n        playerRef.current.destroy();\n      }\n    };\n  }, [isApiReady, videoId, playerId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: playerId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(YouTubePlayer, \"GzGfPbUvdG6W0z3f0P5Fi2llOXc=\");\n_c = YouTubePlayer;\nexport default YouTubePlayer;\nvar _c;\n$RefreshReg$(_c, \"YouTubePlayer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","YouTubePlayer","videoId","playerId","_s","playerRef","isApiReady","setIsApiReady","window","YT","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","current","Player","height","width","playerVars","autoplay","mute","controls","events","onReady","event","target","destroy","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ar913/OneDrive/Desktop/tntPortfolio/src/components/youtubeApi.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst YouTubePlayer = ({ videoId, playerId }) => {\r\n  const playerRef = useRef(null);\r\n  const [isApiReady, setIsApiReady] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Load the YouTube IFrame API if it hasn't been loaded yet\r\n    if (!window.YT) {\r\n      const tag = document.createElement(\"script\");\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n      // Set up the callback for when the API is ready\r\n      window.onYouTubeIframeAPIReady = () => {\r\n        setIsApiReady(true);\r\n      };\r\n    } else {\r\n      // If the API is already loaded, set the state to true\r\n      setIsApiReady(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isApiReady && videoId) {\r\n      // Initialize the player\r\n      playerRef.current = new window.YT.Player(playerId, {\r\n        height: \"135\",\r\n        width: \"240\",\r\n        videoId: videoId,\r\n        playerVars: {\r\n          autoplay: 1, // Autoplay the video\r\n          mute: 1, // Mute the video\r\n          controls: 1, // Show video controls\r\n        },\r\n        events: {\r\n          onReady: (event) => {\r\n            event.target.mute(); // Ensure the video is muted\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (playerRef.current && playerRef.current.destroy) {\r\n        playerRef.current.destroy();\r\n      }\r\n    };\r\n  }, [isApiReady, videoId, playerId]);\r\n\r\n  return (\r\n    <div>\r\n      <div id={playerId}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubePlayer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,aAAa,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEnDF,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACY,MAAM,CAACC,EAAE,EAAE;MACd,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC5CF,GAAG,CAACG,GAAG,GAAG,oCAAoC;MAC9C,MAAMC,cAAc,GAAGH,QAAQ,CAACI,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjED,cAAc,CAACE,UAAU,CAACC,YAAY,CAACP,GAAG,EAAEI,cAAc,CAAC;;MAE3D;MACAN,MAAM,CAACU,uBAAuB,GAAG,MAAM;QACrCX,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC;IACH,CAAC,MAAM;MACL;MACAA,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACd,IAAIU,UAAU,IAAIJ,OAAO,EAAE;MACzB;MACAG,SAAS,CAACc,OAAO,GAAG,IAAIX,MAAM,CAACC,EAAE,CAACW,MAAM,CAACjB,QAAQ,EAAE;QACjDkB,MAAM,EAAE,KAAK;QACbC,KAAK,EAAE,KAAK;QACZpB,OAAO,EAAEA,OAAO;QAChBqB,UAAU,EAAE;UACVC,QAAQ,EAAE,CAAC;UAAE;UACbC,IAAI,EAAE,CAAC;UAAE;UACTC,QAAQ,EAAE,CAAC,CAAE;QACf,CAAC;QACDC,MAAM,EAAE;UACNC,OAAO,EAAGC,KAAK,IAAK;YAClBA,KAAK,CAACC,MAAM,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC;UACvB;QACF;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO,MAAM;MACX,IAAIpB,SAAS,CAACc,OAAO,IAAId,SAAS,CAACc,OAAO,CAACY,OAAO,EAAE;QAClD1B,SAAS,CAACc,OAAO,CAACY,OAAO,CAAC,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAACzB,UAAU,EAAEJ,OAAO,EAAEC,QAAQ,CAAC,CAAC;EAEnC,oBACEH,OAAA;IAAAgC,QAAA,eACEhC,OAAA;MAAKiC,EAAE,EAAE9B;IAAS;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAACjC,EAAA,CAvDIH,aAAa;AAAAqC,EAAA,GAAbrC,aAAa;AAyDnB,eAAeA,aAAa;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}