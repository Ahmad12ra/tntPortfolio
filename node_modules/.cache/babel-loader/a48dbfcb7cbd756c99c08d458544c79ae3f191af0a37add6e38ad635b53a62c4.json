{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar913\\\\OneDrive\\\\Desktop\\\\tntPortfolio\\\\src\\\\components\\\\youtubeApi.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YouTubePlayer = ({\n  videoId,\n  playerId\n}) => {\n  _s();\n  const playerRef = useRef(null);\n  useEffect(() => {\n    // Load the YouTube IFrame API if it hasn't been loaded yet\n    if (!window.YT) {\n      const tag = document.createElement(\"script\");\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    }\n\n    // Function to initialize the player\n    const initializePlayer = () => {\n      playerRef.current = new window.YT.Player(playerId, {\n        height: \"135\",\n        width: \"240\",\n        videoId: videoId,\n        playerVars: {\n          autoplay: 1,\n          // Autoplay the video\n          mute: 1,\n          // Mute the video\n          controls: 0 // don't Show video controls\n        },\n        events: {\n          onReady: event => {\n            event.target.mute(); // Ensure the video is muted\n          }\n        }\n      });\n    };\n\n    // If the API is already loaded, initialize the player immediately\n    if (window.YT && window.YT.Player) {\n      initializePlayer();\n    } else {\n      // Otherwise, wait for the API to be ready\n      window.onYouTubeIframeAPIReady = initializePlayer;\n    }\n\n    // Cleanup function\n    return () => {\n      if (playerRef.current && playerRef.current.destroy) {\n        playerRef.current.destroy();\n      }\n    };\n  }, [videoId, playerId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: playerId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(YouTubePlayer, \"acbxrIfK24+Wx044vlsAOaa8STc=\");\n_c = YouTubePlayer;\nexport default YouTubePlayer;\nvar _c;\n$RefreshReg$(_c, \"YouTubePlayer\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","YouTubePlayer","videoId","playerId","_s","playerRef","window","YT","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","initializePlayer","current","Player","height","width","playerVars","autoplay","mute","controls","events","onReady","event","target","onYouTubeIframeAPIReady","destroy","children","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ar913/OneDrive/Desktop/tntPortfolio/src/components/youtubeApi.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nconst YouTubePlayer = ({ videoId, playerId }) => {\r\n  const playerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Load the YouTube IFrame API if it hasn't been loaded yet\r\n    if (!window.YT) {\r\n      const tag = document.createElement(\"script\");\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n    }\r\n\r\n    // Function to initialize the player\r\n    const initializePlayer = () => {\r\n      playerRef.current = new window.YT.Player(playerId, {\r\n        height: \"135\",\r\n        width: \"240\",\r\n        videoId: videoId,\r\n        playerVars: {\r\n          autoplay: 1, // Autoplay the video\r\n          mute: 1, // Mute the video\r\n          controls: 0, // don't Show video controls\r\n        },\r\n        events: {\r\n          onReady: (event) => {\r\n            event.target.mute(); // Ensure the video is muted\r\n          },\r\n        },\r\n      });\r\n    };\r\n\r\n    // If the API is already loaded, initialize the player immediately\r\n    if (window.YT && window.YT.Player) {\r\n      initializePlayer();\r\n    } else {\r\n      // Otherwise, wait for the API to be ready\r\n      window.onYouTubeIframeAPIReady = initializePlayer;\r\n    }\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (playerRef.current && playerRef.current.destroy) {\r\n        playerRef.current.destroy();\r\n      }\r\n    };\r\n  }, [videoId, playerId]);\r\n\r\n  return (\r\n    <div>\r\n      <div id={playerId}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubePlayer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACS,MAAM,CAACC,EAAE,EAAE;MACd,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC5CF,GAAG,CAACG,GAAG,GAAG,oCAAoC;MAC9C,MAAMC,cAAc,GAAGH,QAAQ,CAACI,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjED,cAAc,CAACE,UAAU,CAACC,YAAY,CAACP,GAAG,EAAEI,cAAc,CAAC;IAC7D;;IAEA;IACA,MAAMI,gBAAgB,GAAGA,CAAA,KAAM;MAC7BX,SAAS,CAACY,OAAO,GAAG,IAAIX,MAAM,CAACC,EAAE,CAACW,MAAM,CAACf,QAAQ,EAAE;QACjDgB,MAAM,EAAE,KAAK;QACbC,KAAK,EAAE,KAAK;QACZlB,OAAO,EAAEA,OAAO;QAChBmB,UAAU,EAAE;UACVC,QAAQ,EAAE,CAAC;UAAE;UACbC,IAAI,EAAE,CAAC;UAAE;UACTC,QAAQ,EAAE,CAAC,CAAE;QACf,CAAC;QACDC,MAAM,EAAE;UACNC,OAAO,EAAGC,KAAK,IAAK;YAClBA,KAAK,CAACC,MAAM,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC;UACvB;QACF;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,IAAIjB,MAAM,CAACC,EAAE,IAAID,MAAM,CAACC,EAAE,CAACW,MAAM,EAAE;MACjCF,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACL;MACAV,MAAM,CAACuB,uBAAuB,GAAGb,gBAAgB;IACnD;;IAEA;IACA,OAAO,MAAM;MACX,IAAIX,SAAS,CAACY,OAAO,IAAIZ,SAAS,CAACY,OAAO,CAACa,OAAO,EAAE;QAClDzB,SAAS,CAACY,OAAO,CAACa,OAAO,CAAC,CAAC;MAC7B;IACF,CAAC;EACH,CAAC,EAAE,CAAC5B,OAAO,EAAEC,QAAQ,CAAC,CAAC;EAEvB,oBACEH,OAAA;IAAA+B,QAAA,eACE/B,OAAA;MAAKgC,EAAE,EAAE7B;IAAS;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAChC,EAAA,CApDIH,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAsDnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}